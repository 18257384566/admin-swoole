// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Game_FrameType int32

const (
	Game_Message  Game_FrameType = 0
	Game_Kick     Game_FrameType = 1
	Game_Ping     Game_FrameType = 2
	Game_Internal Game_FrameType = 3
)

var Game_FrameType_name = map[int32]string{
	0: "Message",
	1: "Kick",
	2: "Ping",
	3: "Internal",
}
var Game_FrameType_value = map[string]int32{
	"Message":  0,
	"Kick":     1,
	"Ping":     2,
	"Internal": 3,
}

func (x Game_FrameType) String() string {
	return proto1.EnumName(Game_FrameType_name, int32(x))
}
func (Game_FrameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type Game struct {
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto1.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Game_Frame struct {
	Type    Game_FrameType `protobuf:"varint,1,opt,name=Type,enum=proto.Game_FrameType" json:"Type,omitempty"`
	Message []byte         `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *Game_Frame) Reset()                    { *m = Game_Frame{} }
func (m *Game_Frame) String() string            { return proto1.CompactTextString(m) }
func (*Game_Frame) ProtoMessage()               {}
func (*Game_Frame) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *Game_Frame) GetType() Game_FrameType {
	if m != nil {
		return m.Type
	}
	return Game_Message
}

func (m *Game_Frame) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type Center struct {
}

func (m *Center) Reset()                    { *m = Center{} }
func (m *Center) String() string            { return proto1.CompactTextString(m) }
func (*Center) ProtoMessage()               {}
func (*Center) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type Center_Req struct {
	Type    uint32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *Center_Req) Reset()                    { *m = Center_Req{} }
func (m *Center_Req) String() string            { return proto1.CompactTextString(m) }
func (*Center_Req) ProtoMessage()               {}
func (*Center_Req) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

func (m *Center_Req) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Center_Req) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type Center_Resp struct {
	Message []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *Center_Resp) Reset()                    { *m = Center_Resp{} }
func (m *Center_Resp) String() string            { return proto1.CompactTextString(m) }
func (*Center_Resp) ProtoMessage()               {}
func (*Center_Resp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 1} }

func (m *Center_Resp) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto1.RegisterType((*Game)(nil), "proto.Game")
	proto1.RegisterType((*Game_Frame)(nil), "proto.Game.Frame")
	proto1.RegisterType((*Center)(nil), "proto.Center")
	proto1.RegisterType((*Center_Req)(nil), "proto.Center.Req")
	proto1.RegisterType((*Center_Resp)(nil), "proto.Center.Resp")
	proto1.RegisterEnum("proto.Game_FrameType", Game_FrameType_name, Game_FrameType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GameService service

type GameServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamClient, error)
	Manage(ctx context.Context, in *Center_Req, opts ...grpc.CallOption) (*Center_Resp, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GameService_serviceDesc.Streams[0], c.cc, "/proto.GameService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceStreamClient{stream}
	return x, nil
}

type GameService_StreamClient interface {
	Send(*Game_Frame) error
	Recv() (*Game_Frame, error)
	grpc.ClientStream
}

type gameServiceStreamClient struct {
	grpc.ClientStream
}

func (x *gameServiceStreamClient) Send(m *Game_Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServiceStreamClient) Recv() (*Game_Frame, error) {
	m := new(Game_Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) Manage(ctx context.Context, in *Center_Req, opts ...grpc.CallOption) (*Center_Resp, error) {
	out := new(Center_Resp)
	err := grpc.Invoke(ctx, "/proto.GameService/Manage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameService service

type GameServiceServer interface {
	Stream(GameService_StreamServer) error
	Manage(context.Context, *Center_Req) (*Center_Resp, error)
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).Stream(&gameServiceStreamServer{stream})
}

type GameService_StreamServer interface {
	Send(*Game_Frame) error
	Recv() (*Game_Frame, error)
	grpc.ServerStream
}

type gameServiceStreamServer struct {
	grpc.ServerStream
}

func (x *gameServiceStreamServer) Send(m *Game_Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServiceStreamServer) Recv() (*Game_Frame, error) {
	m := new(Game_Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameService_Manage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Center_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Manage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GameService/Manage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Manage(ctx, req.(*Center_Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Manage",
			Handler:    _GameService_Manage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _GameService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}

func init() { proto1.RegisterFile("game.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xcf, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x06, 0x60, 0xa7, 0x4d, 0x63, 0x9d, 0x56, 0x89, 0x03, 0x42, 0xd8, 0x53, 0xc8, 0x29, 0x5e,
	0xa2, 0xa4, 0x37, 0xaf, 0x82, 0x22, 0x5a, 0x90, 0xad, 0x77, 0x19, 0xcb, 0x10, 0x82, 0x26, 0x4d,
	0x77, 0x83, 0xe0, 0x5b, 0xf8, 0xc8, 0xb2, 0x5b, 0x0c, 0xd5, 0x1c, 0x7a, 0xda, 0x9d, 0x7f, 0xbf,
	0x65, 0x66, 0x10, 0x4b, 0xae, 0x25, 0x6f, 0xcd, 0xa6, 0xdb, 0xd0, 0xc4, 0x1f, 0xe9, 0x37, 0x60,
	0x70, 0xcf, 0xb5, 0xa8, 0x27, 0x9c, 0xdc, 0x19, 0xae, 0x85, 0x2e, 0x31, 0x78, 0xf9, 0x6a, 0x25,
	0x86, 0x04, 0xb2, 0xb3, 0xe2, 0x62, 0xc7, 0x73, 0x67, 0x72, 0x0f, 0xdc, 0xa3, 0xf6, 0x84, 0x62,
	0x3c, 0x5e, 0x8a, 0xb5, 0x5c, 0x4a, 0x3c, 0x4a, 0x20, 0x9b, 0xeb, 0xdf, 0x32, 0xbd, 0xc1, 0x93,
	0x1e, 0xd3, 0xac, 0x67, 0xd1, 0x11, 0x4d, 0x31, 0x78, 0xac, 0xd6, 0xef, 0x11, 0xb8, 0xdb, 0x73,
	0xd5, 0x94, 0xd1, 0x88, 0xe6, 0x38, 0x7d, 0x68, 0x3a, 0x31, 0x0d, 0x7f, 0x44, 0xe3, 0xf4, 0x15,
	0xc3, 0x5b, 0x71, 0xa5, 0x5a, 0xe0, 0x58, 0xcb, 0x96, 0x68, 0x6f, 0xa2, 0xd3, 0x43, 0xad, 0x55,
	0x82, 0x81, 0x16, 0xdb, 0xee, 0x0b, 0xf8, 0x23, 0x0a, 0x83, 0x33, 0xb7, 0xce, 0x4a, 0xcc, 0x67,
	0xb5, 0x16, 0x2a, 0x30, 0x5c, 0x75, 0x46, 0xb8, 0xa6, 0xf3, 0xc1, 0xb2, 0x6a, 0x18, 0x65, 0x70,
	0x0d, 0x74, 0x85, 0xe1, 0x92, 0x1b, 0x2e, 0xa5, 0xff, 0xb3, 0x1b, 0x39, 0xd7, 0xb2, 0x55, 0xf4,
	0x3f, 0xb2, 0xed, 0x5b, 0xe8, 0xa3, 0xc5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xa8, 0xde,
	0xe6, 0x83, 0x01, 0x00, 0x00,
}
